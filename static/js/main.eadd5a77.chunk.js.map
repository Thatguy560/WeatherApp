{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","process","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","feels_like","wind","speed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8KAEMA,EACCC,mCADDD,EAEE,2CAuEOE,MApEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KA2BX,OAEA,yBAAKC,UAAmC,oBAAhBF,EAAQG,KAC7BH,EAAQG,KAAKC,KAAO,IAAMJ,EAAQG,KAAKC,KAAO,IAAkC,WAA5BJ,EAAQA,QAAQ,GAAGG,KAAqB,iBAAoBH,EAAQG,KAAKC,KAAO,IAAMJ,EAAQG,KAAKC,KAAO,IAAkC,UAA5BJ,EAAQA,QAAQ,GAAGG,KAAoB,WAC1MH,EAAQG,KAAKC,KAAO,GAAiC,SAA5BJ,EAAQA,QAAQ,GAAGG,KAAmB,UAAyC,iBAA5BH,EAAQA,QAAQ,GAAGG,KAA2B,gBAChG,SAA5BH,EAAQA,QAAQ,GAAGG,KAAmB,WAAcH,EAAQG,KAAKC,MAAQ,IAAkC,SAA5BJ,EAAQA,QAAQ,GAAGG,KAAmB,UACrHH,EAAQG,KAAKC,KAAO,GAAiC,UAA5BJ,EAAQA,QAAQ,GAAGG,KAAoB,gBACpC,SAA5BH,EAAQA,QAAQ,GAAGG,KAAmB,cAAgB,YAAe,OACrE,8BACE,yBAAKD,UAAU,cACb,2BACAG,KAAK,OACLH,UAAU,aACVI,YAAY,2BACZC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACjCA,MAAOZ,EACPa,WAvCO,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAIpB,EAAJ,qBAAyBI,EAAzB,+BAAqDJ,IACvDqB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,UAmCW,oBAAhBlB,EAAQG,KAClB,6BACC,yBAAKD,UAAU,gBACb,yBAAKA,UAAU,YAAYF,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,SACvD,yBAAKrB,UAAU,QAlCJ,SAACsB,GAClB,IAGKC,EAFO,CAAC,SAAU,QAAS,UAAW,YAAa,WAAY,SAAU,YAE9DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAKhEL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAyBNE,CAAY,IAAIC,QAEzC,yBAAKhC,UAAU,eACb,yBAAKA,UAAU,QACZiC,KAAKC,MAAMpC,EAAQG,KAAKC,MAD3B,QAEGe,QAAQC,IAAIpB,EAAQA,QAAQ,GAAGG,OAElC,yBAAKD,UAAU,WAAWF,EAAQA,QAAQ,GAAGG,MAC7C,yBAAKD,UAAU,aAAf,cAAuCiC,KAAKC,MAAMpC,EAAQG,KAAKkC,YAA/D,SACA,yBAAKnC,UAAU,aAAf,eAAwCiC,KAAKC,MAAMpC,EAAQsC,KAAKC,OAAhE,SAGE,MCzDQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.eadd5a77.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst api = {\n  key: process.env.REACT_APP_API_KEY,\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery(''); \n          console.log(result);\n        });\n      }\n    } \n\n  const dateBuilder =(d) => {\n    let months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Nov\", \"Dec\"];\n     let days = [\"Sunday\", \"Mondy\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n     let day = days[d.getDay()];\n     let date = d.getDate();\n     let month = months[d.getMonth()];\n     let year = d.getFullYear();\n\n     return `${day} ${date} ${month} ${year}`\n    }\n    return (\n      // (Condition) ? 'return value' :\n    <div className={(typeof weather.main != \"undefined\") ?\n     ((weather.main.temp > 15 && weather.main.temp < 30 && weather.weather[0].main === \"Clouds\") ? 'app warmcloudy' : (weather.main.temp > 15 && weather.main.temp < 30 && weather.weather[0].main === \"Clear\") ? 'app warm' \n     : (weather.main.temp < 1 && weather.weather[0].main !== \"Rain\") ? 'app ice' : (weather.weather[0].main === \"Thunderstorm\") ? 'app lightning' : \n     (weather.weather[0].main === \"Snow\") ? 'app snow' : (weather.main.temp >= 30 && weather.weather[0].main !== \"Rain\") ? 'app hot' : \n     (weather.main.temp < 6 && weather.weather[0].main === \"Clear\") ? 'app coldclear' : \n     (weather.weather[0].main === \"Rain\") ? 'app raining' : 'app clear') : 'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input \n          type=\"text\"\n          className=\"search-bar\"\n          placeholder=\"Search for a location...\"\n          onChange={e => setQuery(e.target.value)}\n          value={query}\n          onKeyPress={search}\n          />\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n       <div> \n        <div className=\"location-box\">\n          <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n          <div className=\"date\">{dateBuilder(new Date())}</div>\n        </div>\n        <div className=\"weather-box\">\n          <div className=\"temp\">\n            {Math.round(weather.main.temp)}°c\n            {console.log(weather.weather[0].main)}\n          </div>\n          <div className=\"weather\">{weather.weather[0].main}</div>\n          <div className=\"feelslike\">Feels like {Math.round(weather.main.feels_like)}°c</div>\n          <div className=\"windspeed\">Wind Speed: {Math.round(weather.wind.speed)}mph</div>\n        </div>\n       </div>\n       ) : ('')}\n      </main>\n    </div>\n  );\n}\n \nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}